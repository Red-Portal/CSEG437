A method and system according to the present invention provide for sharing memory between applications running on one or more CPUs, and acceleration co-processors, such as graphics processors, of a computer system in which the memory may retain its optimal caching and access attributes favorable to the maximum performance of both CPU and graphics processor. 
The method involves a division of ownership within which the shared memory is made coherent with respect to the previous owner, prior to handing placing the shared memory in the view the next owner. 
This arbitration may involve interfaces within which ownership is transitioned from one client to another. 
Within such transition of ownership the memory may be changed from one view to another by actively altering the processor caching attributes of the shared memory as well as via the use of processor low-level cache control instructions, and/or graphics processor render flush algorithms which serve to enforce data coherency. 
Embodiments of the invention facilitate maximal access efficiency for all clients which share the data, without the incurring the overhead of moving or replicating the data between the clients.

In many known computer systems, a host CPU may execute an application which calls for graphics operations to be performed. 
To implement such graphics operations, the application will typically fetch initial graphics data and primitives (including, but not limited to, textures, geometry, models, etc.) from offline storage (including, but not limited to, network, CD or hard-drive disk storage) and create a copy of the graphics data and primitives in online system memory. 
The application may operate on the graphics pixels, data models and primitives in the online system memory and then, at some point, the application may call for a graphics processor of the computer system to operate on the graphics data and primitives, typically in order to offload low-level rendering tasks from the host CPU.