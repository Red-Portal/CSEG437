Software reuse has been getting popularity more and moresince it has been considered as one ofthe most effective waysof increasing productivity and improving quality of software.Product line software engineering (PLSE) is an emergingsoftware engineering paradigm in which applications aredeveloped by integrating existing product line assets.Feature-oriented product line software engineering [1] is apromising software development paradigm and an effective way for software reuse. In the domain of mobile game, mobile games (mobile applications in general) require obligatory non-functionalities(e.g., portability, performance, security) because of itsintrinsic qualities ofenvironments and business constraints. In [2], many of the variations from constrained resources are listed. However, by following the process of [1], we alsoshould consider the results of market analysis. Accordingly,environmental difficulties and business constraints are asfollows: UT features (e.g., various screen sizes, number ofcolors, pixel depth, sound, keypad display, and vibrations);available memory and maximum application size;company-specific libraries; non-functional features (e.g., fasttime-to-market, portability).Although the PLSE becomes more popular for reuse, in thedomain of mobile games, it has been rarely used.

why not to apply PLSE into the domain ofmobile games are asfollows: First, basically the develop cycle is too short to follow processes of product line. Second, though there suggested developing methods with low cost and risk [2], small to medium-sized companies and organizations even tend not totry to find more effective ways. Third, there has been no explicit method for implementing reusable architectures inthat domain. Thus, the guidelines for mobile applicationsproduct lines and the explicit implementation or constructionofreusable architectures are essential for success.Given contemporary methods for developing product lines inthe domain of mobile games and suggested softwarearchitecture patterns which are directly applicable, we can expect to improve quality and to increase productivity through using the available resources. Moreover, if the architectures are independent from various platforms which are converted later into a platform specific model (PSM), we can also expect to obtain theadaptability, portability, and reusability. Hence,in this paper, we suggest the feature-oriented architecture patterns for mobile games product lines.

2. Mobile Game Domain In general, applications in mobile application domain are mainly classified into server-side applications and client-sideapplications. However, we are more familiar with ones inclient-side. Hence, we primarily focus on eliciting architecturepatterns in the domain ofrich-clients ofmobile games.


Page 1
Architecture Patterns for Mobile Games Product Lines Hojin ChoDept. of Computer Science and Engineering,POSTECHNUCL23 @postech.ac.kr Abstract - Product line software engineering (PLSE) is apromising method for software reuse. For the key of success, areusable and adaptable architecture design is necessary. Indomain of mobile games product lines, architectures have somecommon structures because of circumstance properties of thedomain and business constraints. In this paper, we classify themas architecture patterns. By doing this, we can expect increasing portability, reusability, adaptability, maintainability, and eventually productivity and improving quality.Keywords - Software Product Line, Architecture Pattern,Mobile Game, Software Reuse. 1. Introduction' Software reuse has been getting popularity more and moresince it has been considered as one ofthe most effective waysof increasing productivity and improving quality of software.Product line software engineering (PLSE) is an emergingsoftware engineering paradigm in which applications aredeveloped by integrating existing product line assets.Feature-oriented product line software engineering [1] is apromising software development paradigm and an effective way for software reuse. In the domain of mobile game, mobile games (mobile applications in general) require obligatory non-functionalities(e.g., portability, performance, security) because of itsintrinsic qualities ofenvironments and business constraints. In [2], many of the variations from constrained resources are listed. However, by following the process of [1], we alsoshould consider the results of market analysis. Accordingly,environmental difficulties and business constraints are asfollows: UT features (e.g., various screen sizes, number ofcolors, pixel depth, sound, keypad display, and vibrations);available memory and maximum application size;company-specific libraries; non-functional features (e.g., fasttime-to-market, portability).Although the PLSE becomes more popular for reuse, in thedomain of mobile games, it has been rarely used. The reasons ' This work was supported by the Korea Research Foundation Grant fundedby the Korean Government (MOEHRD, Basic Research Promotion Fund) (KRF-2006-33 1-D00475) and wassupported by the IT R&D program of MIC/IITA [2007-S032-01, Developmentof mobile application software developmentenvironmenttechnologysupportingmulti-platform].Jin-Seok YangPOSTECH Information Research Lab, POSTECHedeward@postech.ac.krwhy not to apply PLSE into the domain ofmobile games are asfollows: First, basically the develop cycle is too short to follow processes of product line. Second, though there suggested developing methods with low cost and risk [2], small to medium-sized companies and organizations even tend not totry to find more effective ways. Third, there has been no explicit method for implementing reusable architectures inthat domain. Thus, the guidelines for mobile applicationsproduct lines and the explicit implementation or constructionofreusable architectures are essential for success.Given contemporary methods for developing product lines inthe domain of mobile games and suggested softwarearchitecture patterns which are directly applicable, we can expect to improve quality and to increase productivity through using the available resources. Moreover, if the architectures are independent from various platforms which are converted later into a platform specific model (PSM), we can also expect to obtain theadaptability, portability, and reusability. Hence,in this paper, we suggest the feature-oriented architecture patterns for mobile games product lines. 2. Mobile Game Domain In general, applications in mobile application domain are mainly classified into server-side applications and client-sideapplications. However, we are more familiar with ones inclient-side. Hence, we primarily focus on eliciting architecturepatterns in the domain ofrich-clients ofmobile games. Mo b ile GameGarne Play StyleNetwo rk ConrnectionGenreCo ntents Ev olut ionTurn-Based ,Scenario-Based AlwaysNo rieReal-TimePartialArcad e Simfulatio n Strategy RPGJ ump & unPuzzle RctgFght FlightLoveNuUrtur TBSRTSTRPG Tactics Shoot ing Spo rIts Histo ry Co nstruction Hybrid Action RP G Onlinee RPG Figure 1. A partial feature model of mobile game domain Figure 1 shows a partial feature model of the mobile gameclient domain. Since the features such as "Game Play Style","Genre", and "Contents Evolution" can affect the softwarearchitecture organization, they are used to parameterize thesoftware architecture patterns. Hence, through the feature Feb. 17-20, 2008 ICACT 2008ISBN 978-89-5519-136-3 -118- Authorized licensed use limited to: POSTECH. Downloaded on July 18,2010 at 08:22:48 UTC from IEEE Xplore. Restrictions apply.
Page 2
selection, semi-automatic derivation of architecture patterns can be conducted in the mobile games product line.Although there are some other important factors such as QoS and other quality attributes which affect software architecture,the result of the feature selection mere guide the architectureselection. In other words, they are too abstract and thus we are hard to choose concrete one through them. For example, most of the applications in mobile game domain require QoS(Quality of Service) such as safety, usability, security, andperformance and development quality attributes such as maintainability, reusability, modifiability, and fast time-to-market. Hence, it is possible to derive almost all ofthepattern candidates from those general requirements. Thus, weshould do feature modeling in a more domain-specific waythrough the significant characteristics in mobile game domain.That is, the feature model should contain more valuable forderiving (Fig. 1). 3. Architecture Pattern Basis For the reusable architecture as patterns, we focus on module architecture patterns which are derived from real products byapplying reverse engineering. Since, in general, performanceand generalization (for reuse) are in inverse proportion, weshould regulate qualities ofthe patterns between performanceand reusability. 3.1 Canonical Form Like design patterns [3], we can classify architecture patterns. By using classification templates, we can easily applypatternsto problems. Here,we suggest that a canonical form for architecture patterns. Table 1. A template for the canonical form Item Description Name The name of a pattern Context The context forapplying a patternSolution How a pattern applies to the context VariantsVariation points ofa patternRelated patterns Other patterns related to a pattern It is noted that, in addition to these items, descriptions for an architecture pattern should contain a static diagram to showthe overall organization ofthe pattern and a behavior diagram to show the significant dynamic behavior to know how the pattern works.In addition to these items, we have been augmenting theentries to contain more specific and useful information such as names which are also known as, examples to explain the need ofthe pattern, problems which will be addressed by the pattern, implementation guidelines, resolved examples, and so on.