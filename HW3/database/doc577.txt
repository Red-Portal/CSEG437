The game industry is pushed forward by gamers, not by marketing and business
executives, which makes this industry somewhat unique in the world of entertainment.
Isn¡¯t it obvious that professional sports (NFL, NBA, NHL, and MLB
here in the States) are not advanced or directed by the fans? On the contrary, the
fans are often derided and ignored by not only the team franchises, but by the
organizations themselves. This is an example of how centralized management
can lead to problems. Unfortunately for sports fans, they are more than willing
to put up with the derision given to them because they love the sport. This is a
level of loyalty that simply doesn¡¯t exist in any other industry. If you love sports,
you ignore all the problems and just enjoy the game, but that doesn¡¯t change the
fact that it¡¯s a seller¡¯s market (although digital entertainment is drawing fans
away from professional sports in droves).
How is the game industry a buyer¡¯s market (meaning, gamers have a lot of
influence over the types of games that are created)? Most games are created
specifically for a consumer segment, not for the general public. The decision
makers at game publishing companies choose projects that will reach as many core
constituents as possible, while also trying to reach casual gamers and hardcore fans
of other game genres. For instance, Blizzard Entertainment (a subsidiary of
Vivendi Universal Games, which also owns Sierra Entertainment) targets mainly
two genres: real-time strategy games (WarCraft series, StarCraft), and role-playing
games (Diablo series, World of WarCraft).
Can you think of a game that Blizzard has published that does not fit into these
two genres? Blizzard has consistently hit the mark dead on with their games in
terms of target audience, quality, polish, and subsequent mass appeal. World of
WarCraft has sold millions of copies with millions of simultaneous players
supported on its multitude of servers. WarCraft III has sold more than five
million units (including the add-ons), while the entire WarCraft series has sold
twelve million units since its debut in 1994. StarCraft has sold nine million
copies since 1998 (including add-ons), while StarCraft II, released this year,
increases the series total.
Why do you suppose Blizzard has been so successful? Certainly not through
aggressive advertising campaigns! Gamers have traditionally been immune to
marketing, relying primarily on word-of-mouth recommendations from friends,
online review sites, and bloggers for their game purchase decisions. If any of
Blizzard¡¯s games had not been up to par with the gamers, they would not have
continued to play the game. But the sales figures shown here reveal products that
have had a very long shelf life due to continued sales.
Design Rules
I could go into other companies with equally impressive success stories, as well
as those that have been dismal failures. But my goal is to demonstrate to you that
the game industry is indeed a buyer¡¯s (gamer¡¯s) market. It¡¯s not dictated and
ruled by the board of directors of one company or another or by marketing
people, who have been stymied by the reluctance of gamers to go along with
traditional promotional theories. In other words, gamers are a tough audience!
It¡¯s an empowering position to be in, knowing that your personal preferences
and tastes are shared by millions of others who demand excellence and
innovative gameplay, and that these demands are met, more or less. Companies
that produce excellent games are rewarded by gamers, while those that fall short
quickly close up shop and move on.
Would you like another real-world example? A few years ago, a new publisher
emerged in the game industry by the name of Eidos. This company¡¯s bank
account was padded by millions of PlayStation owners who had all fallen in love
with Lara Croft. Eidos seems to have misinterpreted the market, believing that
gamers loved the image and motif of this Bond-esque heroine. Eidos created a
new hotshot team in Texas made up of some industry veterans in an endeavor
called Ion Storm. The belief was that marketing the ¡°rock-n-roll¡± hype of these
developers would lead to millions of preorder sales for their games (coming
from the successes of the two Tomb Raider sequels).
Eidos failed to recognize that gamers bought into Lara Croft because the games
were fun, not because of the image. When Ion Storm was launched, Eidos
printed two-page spreads in major game magazines showing the team rather
than the upcoming games in development. The developers of Daikatana were
not able to keep up with the marketing explosion and were derided for
producing an average game that would have been well received were it not
blacklisted by gamers after years of hype. The impression was very strong that it
was all about sales, not a gaming experience, and gamers rejected that notion.
Eidos has moved on from the experience too, having published some fantastic
games such as LEGO: Star Wars, Deus Ex, and Anachronox.
In my experience, the fun factor of video games has risen exponentially in the last
two decades, along with the complexity of modern games. Let¡¯s face it; you can
only play Pac-Man for an hour or so until it becomes tedious. The same applies to
most of the classic arcade games. At one time, you could fit every video game in
existence in a single room, and those quarter-fueled machines were housed in
stand-up cabinets. Since that time, there have been about a half million games
created, though we might narrow down that figure to a few thousand good games,
out of which we find a few hundred ¡°Hall of Fame¡± greats.
The Casual Games Market
In recent years a new game genre called casual games arose in the game industry.
This genre has been relegated to secondhand status for many years, while the
numbers of gamers has risen from the hardcore ¡°geek¡± fans to include more and
more people. The average gamer plays games for a few hours a week, whereas
the hardcore gamer spends 20 or more hours playing games every week (like a
part-time job). Casual gamers, on the other hand, will only spend a few minutes
playing a game now and then?perhaps every day, but not always. The casual
gamer does not become addicted to any game the way a hardcore gamer does,
with games such as World of WarCraft, Star Wars: The Old Republic, Lord of the
Rings Online, and so on.
So, what is a casual game anyway? A casual game is any game that can be played
in a short timeframe and requires no instructions on how to play. In this
context, almost every classic arcade game ever made falls into this category. It is
only recently that publisher and game industry pundits have begun to realize
that gamers really don¡¯t want the long, drawn-out experience of installing a
game, downloading a patch, and spending eight hours learning how to play it.
Sometimes it is refreshing to just fire up a game and play for 10 or 20 minutes
without having to screw with it all evening! This was a gripe of mine for a long
time. It is why I spend far more time playing console games than PC games, and
I¡¯m sure many readers share that sentiment.
No Manual Required
Yes, there are some PC games that are so compelling or innovative that they are
worth the effort to get them installed and running. The best example of late is
World of WarCraft. I have spoken to many gamers who claim that if Blizzard¡¯s
games were not so darned much fun, they would boycott Blizzard altogether!
(How¡¯s that for a contradiction?) The impression I get is that these gamers have
a love/hate relationship with Blizzard and many other game publishers as well.
(Lest you suspect that I suffer from memory lapse over Blizzard, let me clear up
one important point?I love their games, but dislike their terrible installers!)
Case in point, I could not install World of WarCraft on my decently equipped
laptop. First, the installer locked up and a subsequent install attempt reported an
error on disc two. I got around these issues by copying all four discs to the hard
drive and installed it from there with no more problems. However, as soon as I
fired up the game and logged in to my account, it dropped out to download a
260MB update to the game. When that was done, three more small updates were
installed just to bring the game up to the latest version. Are these problems
tolerable? Yes and no. On the one hand, this is the most advanced and complex
MMORPG (massively multiplayer online role-playing game) ever created, and
Blizzard has a full-time team continually creating new content and improving
the game, which I applaud. But on the other hand, that sure was a lot of work
just to get the game installed, and it took three hours of my time (which is why
hardcore gamers tend to have more than one PC).
Would a casual gamer be willing to devote that much time just to install a game
that will end up requiring hundreds of hours of gameplay in order to rise through
the ranks within the game world? Most casual gamers do not have the time or
patience to jump through so many hoops for Blizzard, unless a friend helps them
get started. Such is the target audience for casual games! Have you ever given
serious thought to this issue? If you are an IT (information technology) professional
or a hardcore gamer, you are used to dealing with computer problems and
coping with them without incident. But do you ever wonder, if you?a smart,
experienced, knowledgeable computer expert?are having problems with a game,
how on earth will an average user figure out these problems? Well, the short
answer is, they don¡¯t, which accounts for most game returns.
Casual Games
Casual gamers include professionals such as doctors and lawyers, business
executives, software developers, and, well, everyone else. Casual games attract
people from all cultures, classes, genders, religions, ethnicities, and political
orientations. Given that most potential game players are not willing or able to
cope with the issues involved in PC games, is it any wonder that this burgeoning
market has been inevitable for several years now? While casual games are
currently played mainly in a web browser using technology such as Java and
Flash, the console systems are featuring online gameplay as well, and this trend
will continue to gain popularity.
The casual game market was limited a few years ago. Only recently has this
subject started to show up on the radar of publishers, schools, and retail stores,
even though gamers have been playing casual games for two decades. (I
predicted casual games would take off a few years ago, but my dog ate that
article.) Casual games are a win-win situation because they are just as easy to
create as they are to play, so the developer is able to create a casual game in a
short timeframe, and the gamer has an enjoyable experience with a lot of
choices. Casual games have a very simple distribution model (most are put up
on a website for online play), a respectable compensation model (developers
receive a percentage of net sales or a single lump sum), an often meager
development cycle measured in weeks or a few months, and almost no testing
required. As a casual game developer, you can come up with an innovative game
idea, develop the game, and get it onto store shelves (that is, a website) all within
the timeframe of just the concept-art stage of a full-blown retail game.
Jay Moore was an evangelist for Garage Games who promoted the Torque game
engine around the country at conferences and trade shows. He spoke at the 2005
Technology Forum at the University of Advancing Technology, where he
addressed the possibility of earning a living as a casual game developer. Garage
Games¡¯ Torque engine has been ported to Xbox 360, and they have published
two games on Xbox Live Arcade that you can download and play if you are a
Live user. Marble Blast is one such game, and Garage has many more games
planned for release on Live and through retail channels. In fact, when you
purchase the entire Torque game engine for $100, you have the option of
publishing through Garage Games, which does the contractual work and
provides you with a contract (subject to quality considerations, of course).
Microsoft has really embraced casual games by making it possible for independent
developers to publish games directly on Xbox Live Arcade without
going through retail channels. Xbox 360 is the first console video game system in
history to provide downloadable games right out of the box without first
purchasing retail software. If you are interested in casual games, you can
enjoy playing on Xbox Live Arcade without buying a retail game at all, because
many games are available for free trial and purchase on Xbox Live Arcade (with
a membership account, that is). Indie developers can use XNA Game Studio to
develop games for Windows, Xbox 360, Zune, and Windows Phone 7 for a small
annual membership fee.
I attended the Austin Game Conference in 2005, and the focus of the show was
about casual games. Microsoft¡¯s booth was titled ¡°Microsoft Casual Games,¡± and
they were giving away USB flash drives with the MSN Messenger SDK and
showcasing some of their Xbox Live Arcade games, as just one example. These
early efforts to promote casual game development on Microsoft¡¯s platforms has
paid off in a huge way today with Xbox Live seeing huge earnings for both
Microsoft and all of their publishers and indie developers alike, thanks to a very
reasonable 70/30 royalty rate.
One of the earliest downloadable games on Xbox Live Arcade was RoboBlitz.
This game was built using the Unreal Engine 3 (which Epic Games developed
for Unreal Tournament III). RoboBlitz also makes use of the impressive Ageia
on Xbox Live Arcade from the creators of Project Gotham Racing is Geometry
Wars. This game is unique and compelling, with gameplay that involves gravity
and weapons that resemble geometric shapes.
If you feel as if I¡¯ve been leading you along a train of thought, you would be right
to trust your feelings. The focus of this book is about programming games using
Java with a strong emphasis on casual games, and we will learn to do just that
shortly. Since Java is the pioneer language of casual game development, I will be
emphasizing this aspect of gaming while creating web-based projects in the
chapters to come. But for those interested in just Java game programming
without concern for the web or the casual market, most of the projects will be
presented as standalone applications that do not need AppletViewer or a web
browser.

This chapter will give you a glimpse of what¡¯s coming in the next few chapters
while teaching you some of the basics of game creation. The game featured here
was inspired by the classic Atari game of Asteroids. My first video game system
was an Atari 2600, and I spent many hours with it. In this chapter, you¡¯ll learn
how to create a variation of this classic game, which will be the basis of a more
advanced game later on when we get to Part III. This will also be our first really
big applet chapter?learning how to build a Java applet?based game, and the
specific source code features of an applet. We will return to using JFrame as well
in upcoming chapters rather than focusing on just one or the other.
Here are the key topics in this chapter:
n Creating an Asteroids-style game
n Writing key classes: BaseVectorShape, Ship, Asteroid, and Bullet
n Writing the main source code
n Calculating velocities on the fly
About the Game Project
Our game project in this chapter will run in a web browser window with a
resolution of 640480 and will be done entirely using vector graphics. It will
have some features that you have not yet learned about, but the exposure to this
code will be helpful to you. I want to introduce you to some of the concepts early
on, before you have learned all of the prerequisites (otherwise, we wouldn¡¯t be
able to create a game until about halfway through the book!). You may not
understand everything in the source code for the game at this point, but you will
learn how it works in time. Figure 3.1 shows the completed game you will build
in this chapter.
As mentioned, the game is entirely based on vector graphics. The player¡¯s ship, the
asteroids, and the bullets are all rendered as polygons, as shown in Figure 3.2.
Def i n i t i o n
Vector graphic displays are different from our modern monitors in that they draw shapes based on
entire lines. On the other hand, our modern displays draw raster graphics based on pixels.
All of the objects in the game are moved using an algorithm that calculates the X
and Y velocity values, which are used to update the object¡¯s position on the
screen. All of these values use floating-point math, and the result is fluid 2D
rotation animation and realistic movement. Each of the vector shapes in the
game has a built-in bounding rectangle that is used to simplify collision testing,
which is a crucial aspect of the game (see Figure 3.3). Without it, the bullets
would not destroy the asteroids, and the ship would be invulnerable! Collision
testing is what makes gameplay possible in a game.
The goal is to modify this game concept later on to come up with a high-quality,
polished game with a lot of interesting gameplay features (such as power-ups) by
the time you¡¯ve finished the book. The final version of Galactic War is an arcadestyle
game with many different types of asteroids, animated explosions, and powerups
for the player¡¯s ship. When we start working in earnest on Galactic War, we¡¯ll
make a transition from vector graphics (based on polygons) to rasterized graphics
(based on bitmaps). But before you can run, as the old saying goes, you have to
learn how to walk. This chapter teaches you how to walk, and you will gradually
improve the game a little at a time, starting with the next chapter.
Creating the Game
This game is divided into five classes. Does that seem like a lot of classes for just
your first game? I thought about that for a while, considering this might be too
much code all at once. But I think you will enjoy it. This is a complete game, for
the most part, so you can examine it?pore over the lines of code in Holmesian
style (with a magnifying glass, if you wish)?to learn the secrets of how a game is
made. You are presented with a mystery of sorts?a complete game. Your task is
to reverse engineer the situation to determine, step by step, what events led up to
the complete game. The main class, Asteroids, contains the main source code
for the game. Four additional classes are used:
The BaseVectorShape Class
The three main objects in the game (the asteroids, the bullets, and the player¡¯s
ship) are all derived from the BaseVectorShape class. I originally wrote this game
without the base class, and in the end, all three of the game objects (the player¡¯s
ship, the bullets, and the asteroids) ended up sharing most of their properties
and methods, so the BaseVectorShape class was a way to clean up the code. In
the end, I put a lot of useful methods in this class for handling the needs of this
vector graphics game. By doing this, I have used the object-oriented feature
called inheritance. The Asteroid, Ship, and Bullet classes are all derived from
BaseVectorShape, which contains code that is shared by all three. As a result, the
code for the three subclasses is quite short in each case.
This game detects collisions between the asteroids, bullets, and player¡¯s ship, so
each vector shape in the game includes its own bounding rectangle. While the
getBounds() method is not found in the BaseVectorShape class for reasons I¡¯ll
explain in a moment, this method does use the getX() and getY() methods from
the base class to calculate the bounding rectangle. This class basically contains all
the variables that will be used to move the objects around on the screen, such as
the X and Y position, the velocity, the facing and moving angles, and the shape
itself (which is a polygon).