DirectX¢ç 11, the next generation of graphics technology, arrives with Windows 7. This is great news for players as many of the newest Windows games will take full advantage of this technology to create more immersive and detailed worlds and experiences. Game developers will utilize new features to create rich worlds, realistic characters, and more fluid gameplay.

DirectX 11 features include:

Tessellation ? Tessellation is implemented on the GPU to calculate a smoother curved surface resulting in more graphically detailed images, including more lifelike characters in the gaming worlds that you explore.

Multi-Threading ? The ability to scale across multi-core CPUs will enable developers to take greater advantage of the power within multi-core CPUs. This results in faster framerates for games, while still supporting the increased visual detailing.

DirectCompute ? Developers can utilize the power of discrete graphics cards to accelerate both gaming and non-gaming applications. This improves graphics, while also enabling players to accelerate everyday tasks, like video editing, on their Windows 7 PC.

While Windows 7 is fully compatible with games and hardware that use older versions of DirectX, the new DirectX 11 features are available with a DirectX 11 compatible graphics card and games designed to take advantage of this new technology.

Why develop a DirectX game?
The answer is simple: you want to make a game that is graphics- or multimedia-intensive, and can use the features that many current graphics hardware devices provide. You may find this more complicated if you are new to game development, or if you have no experience with Windows development and C/C++, but there's still some good news: this is the simplest and most cohesive version of DirectX yet -- and the most powerful and feature-rich.
Planning your game is essential. If you are new to game development, and your game does not have demanding graphics requirements, consider developing it as a Windows Store app using JavaScript or Windows Store app built for Windows using C++, C#, or Visual Basic instead. Also, there are many gaming middleware graphics and game development packages available for Windows platforms, and for some you don't need in-depth programming knowledge.
You develop Windows Store apps with DirectX and C++. We recommend that you have a good foundational knowledge of computer programming before you start developing with DirectX, because you will need strong knowledge of Windows resources and computer algorithms to use it effectively. A good understanding of linear algebra and trigonometry will also help you grasp the nature of many of the types and APIs you'll use as you develop your game.
That said, if you are confident, read on!
What is DirectX?
DirectX is Microsoft's most extensive collection of graphics and multimedia APIs for game development. There are APIs for almost all aspects of the game development process: 2D and 3D graphics, audio, input, and text resources.
DirectX contains several sets of APIs:
Direct2D, a library of 2D graphics functions.
Direct3D, a library of both 2D and 3D graphics functions, and high-level shader language APIs
DirectWrite, a library of text and font rendering functions, particularly well suited to graphics and game development.
DirectXMath, a library of numerical methods and math functions for game development.
XAudio2, a full-featured audio and signal playback and mixing library.
XInput, a library of functions that support game controllers.
Get started with DirectX game development
Here's some help for the new DirectX game developer getting started creating Windows Store C++ games for Windows 8.

We discuss the use of 2D bitmap graphics and effects, and how to use them in your game.
2D graphics are a subset of 3D graphics that deal with 2D primitives or bitmaps. More generally, they don't use a z-coordinate in the way a 3D game might, since the game play is usually confined to the x-y plane. They sometimes use 3D graphics techniques to create their visual components, and they are generally simpler to develop. If you are new to gaming, a 2D game is a great place to start, and 2D graphics development can be a good place for you to get a handle on DirectX.
You can develop 2D gaming graphics in DirectX using either Direct2D or Direct3D, or some combination. Many of the more useful classes for 2D game development are in Direct3D, such as the Sprite class. Direct2D is a set of APIs that primarily target user interfaces and apps that require support for drawing primitives (such as circles, lines, and flat polygon shapes). With that in mind, it still provides a powerful and performant set of classes and methods for creating game graphics as well, especially when creating game overlays, interfaces, and heads-up displays (HUDs) -- or for creating a variety of 2D games, from simple to reasonably detailed. The most effective approach when creating 2D games, though, is to use elements from both libraries, and that's the way we will approach 2D graphics development in this topic.
Note  Because of a limitation in the BUILD version of the Windows App Certification Kit (Windows ACK), Windows Store apps that use BSTR or Variant variables or Direct2D1 objects might fail the certification test when there is nothing wrong with the app.
Concepts at a glance
Before the advent of modern 3D graphics and the hardware that supports it, games were primarily 2D, and many of their graphics techniques involved moving blocks of memory around -- usually arrays of color data that would be translated or transformed to pixels on the screen in a 1:1 fashion.
In DirectX, 2D graphics are part of the 3D pipeline. There is a much greater variety of screen resolutions and graphics hardware available, and your 2D graphics engine must be able to support them without a significant change in fidelity.
Here are a few of the basic concepts you should be familiar with when starting 2D graphics development.
Pixels and raster coordinates. A pixel is a single point on a raster display, and has its own (x, y) coordinate pair indicating its location on the display. (The term "pixel" is often used interchangeably between the physical pixels that comprise the display and the addressable memory elements used to hold the color and alpha values of the pixels before they are sent to the display.) The raster is treated by APIs as a rectangular grid of pixel elements, which often has a 1:1 correspondence with the physical pixel grid of a display. Raster coordinate systems start from the upper left, with the pixel at (0, 0) in the upper leftmost corner of the grid.
Bitmap graphics (sometimes called raster graphics) are graphic elements represented as a rectangular grid of pixel values. Sprites -- computed pixel arrays managed independent of the raster -- are one type of bitmap graphic, commonly used for the active characters or background-independent animated objects in a game. The various frames of animation for a sprite are represented as collections of bitmaps called "sheets" or "batches." Backgrounds are larger bitmap objects that are the same resolution or greater than that of the screen raster, and often serve as the backdrop(s) for a game's playfield.
Vector graphics are graphics that use geometric primitives, such as points, lines, circles, and polygons to define 2D objects. They are represented not as arrays of pixels, but as the mathematical equations that define them in a 2D space. They do not necessarily have a 1:1 correspondence with the pixel grid of the display, and must be transformed from the coordinate system that you rendered them in into the raster coordinate system of the display.
Translation is when you take a point or vertex and calculate its new location in the same coordinate system.
Scaling is when you enlarge or shrink an object by a specified scale factor. With a vector image, you shrink and enlarge its component vertices; with a bitmap, you enlarge the pixel elements or diminish them. With bitmap images, you lose pixel data when the image shrinks, and you enlarge the individual pixels when the image is scaled closer. For the latter, you can use pixel color interpolation operations, like bilinear filtering, to smooth out the harsh color boundaries between the enlarged pixels.
Rotation is when you rotate an object about a specified axis or axes. With a vector image, the vertices of the geometry are multiplied against a rotation matrix to obtain the rotated vertex; with a bitmap image, different algorithms can be employed, each with a lesser or greater degree of fidelity in the results. As with scaling and translation, there are APIs specifically for rotation operations.
Transformation is when you take one point or vertex in one coordinate system and calculate its corresponding point or vertex in another coordinate system. This includes translation, scaling, and rotation, as well as other coordinate calculation operations.
Clipping is when you remove portions of bitmaps or geometry that are not within the viewable area of the display, or are hidden by objects with higher view priority.
The frame buffer is an area in memory -- often in the memory of the graphics hardware itself -- that contains the final raster map that you will draw to the screen. The swap chain is a collection of buffers, where you draw in a back buffer and, when the image is ready, you "swap" it to the front and display it.
Design considerations
2D graphics development is a great way to get accustomed to developing with Direct3D, and will allow you to spend more time on other critical aspects of game development: audio, controls, and the game mechanics.
Always draw to a back buffer. Drawing directly to your frame buffer means that your image will be displayed when the signal for display is received (usually every 1/60th of second), even if your drawing operation hasn't completed!
Design your graphics engine to support a good selection of resolutions, from 1024x600 to 1920x1080 (or higher). Your audience will thank you if you support their LCD monitor's native resolution, especially with 2D graphics.
Great artwork will be your greatest asset, when it comes to visuals. While your bitmap graphics may lack the punch of 3D photorealistic visuals using the latest shader model features, great high-resolution artwork can often convey as much or more style and personality -- and with far less of a performance penalty.