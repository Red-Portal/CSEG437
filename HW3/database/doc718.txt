Fast OpenGL-rendering of Lens Flares

A lens flare is a cool effect that occurs when internal refractions and refractions of incident light within the internals of a physical camera create bright patterns within the image. 

Photographers generally try to avoid lens flares within their images by using lens hoods, though some photographers use the effect to artistic advantage.

Traditionally, computer graphics often tries to immitate the results of photography. 

This can even include immitating effects such as a lens flare that is in actuality an artifact of the photographic process. Adding a lens flare into a computer generated image or animation can help overcome the computer generated coldness of computer rendered scenes. 

A lens flare can make it look as if your computer rendered scene was captured by a camera.

A lens flare can be simulated with fast texture mapping techniques. 

The screen snapshots below show lens flare effects generated in real-time with OpenGL.

How the Lens Flare Gets Rendered
This discussion briefly describes how OpenGL is used to render the lens flare effect.

The shine and flare textures are loaded as OpenGL luminance texture objects. 

The lens effect is really a series of screen-aligned textured quads projected in the direction of the flare. Some 3D vector calculations first calculates the direction and extent of the flare.

The colorful rainbow burst part of the flare is generated by texturing 3 quads, one red, one green, and one blue, each using a different one of the 10 shine texture objects. But how does that give a rainbow burst? The textures are simply luminance values (greyscale). The answer is that the GL_MODULATE texture environment is used to multiply the red, green, and blue of each of the three quads. This gives you shades of red, green, and blue.

But if you refer to the screen snapshots above, you'll see the center of the shine burst is white and there are colors other than red, green, and blue. You get a nice saturated white center because all the lens flare quads are being drawn with OpenGL blend enabled and the blend function being configured by calling:

This blend equation literally adds each red, green, or blue quad with what is already in the frame buffer. Since the center of the three textured quads for the burst is red, green, and blue respectively, you get a saturated white center. Also, because each quad is using a slightly different burst texture, the edges of the burst get different combinations of red, green, and blue, so the result is a rainbow pattern at the outward streaks of the burst.

In addition to the shiny burst, you also seen the red circles shooting out in the direction of the lens flare. These are just several more screen-aligned textured quads blended just like the burst except they are directed out in the direction of the lens flare. Instead of using the shine texture objects, they use flare texture objects.

Switching between various texture objects is easy in OpenGL. Just call glBindTexture. Between the rendering of each screen-aligned textured quad, glBindTexture is called.

A few last notes. Normally, you'll render your scene, then overlay the lens flare (hopefully based on where the sun or other bright light source is in your scene). The lens flare does not need depth testing to be enabled. You can also get away with disabling blending during the lens flare. This will definitely help improve the performance of this technique.